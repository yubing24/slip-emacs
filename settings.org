* Library for Emacs Lisp
Import libraries that are useful for Elisp programming.
#+begin_src
  (use-package dash)
#+end_src

* System Configuration
** custom.el
#+BEGIN_SRC emacs-lisp
  (setq custom-file "~/.emacs.d/custom.el")
#+END_SRC
** Garbage Collection
#+BEGIN_SRC emacs-lisp
  (setq gc-cons-threshold-original gc-cons-threshold)
  (setq gc-cons-threshold (* 1000 1000))
  (setq read-process-output-max (* 128 1024 1024))
  (message "Garbage collection configured")
#+END_SRC
** Text Encoding
#+begin_src emacs-lisp
  (set-charset-priority        'unicode)
(setq locale-coding-system   'utf-8)
(set-terminal-coding-system  'utf-8)
(set-keyboard-coding-system  'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system        'utf-8)
(setq default-process-coding-system '(utf-8-unix . utf-8-unix))
#+end_src
** Package Management
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                        ("elpa" . "https://elpa.gnu.org/packages/")
                        ("melpa-stable" . "https://stable.melpa.org/packages/")
                        ("nongnu" . "https://elpa.nongnu.org/nongnu/")))
  (package-initialize) ;; initialize package list
  (unless package-archive-contents
    (package-refresh-contents)) ;; useful when setting up a new computer
  (unless (package-installed-p 'use-package) ;; if use-package is not installed
    (package-refresh-contents) ;; update package list before install use-package
    (package-install 'use-package)) ;; install use-package
  (require 'use-package)
  (setq use-package-always-ensure t)
  (message "use-package is configured")
#+END_SRC

** External Program Execution Path
#+begin_src emacs-lisp
(setq exec-path (append exec-path '("/usr/local/bin"))
      exec-path (append exec-path '("~/go/bin")))
#+end_src

* Org Mode
Install OrgMode first
#+begin_src emacs-lisp
  (defun yhou-org-custom-setup()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (auto-fill-mode 0)
    (visual-line-mode 0))

  (use-package org
    :pin elpa
    :hook (org-mode . yhou-org-custom-setup))
#+end_src


#+begin_src emacs-lisp
  (setq org-variable-pitch-mode 1)
  (setq visual-line-mode 0)
#+end_src

** Font
#+begin_src emacs-lisp
  (dolist (face '((org-level-1 . 1.8)
		(org-level-2 . 1.6)
		(org-level-3 . 1.5)
		(org-level-4 . 1.4)
		(org-level-5 . 1.3)
		(org-level-6 . 1.2)
		(org-level-7 . 1.1)
		(org-level-8 . 1.1)))
	(set-face-attribute (car face) nil :font "JetBrains Mono" :weight 'regular :height (cdr face)))


    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
  (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)
#+end_src

** Bullets
Use a better looking header system. Bullets is a bit old. 
#+begin_src emacs-lisp
   (use-package org-superstar
     :pin melpa
     :after org
     :hook (org-mode . org-superstar-mode) ;; setup minor mode
     :config (set-face-attribute 'org-superstar-header-bullet nil :inherit 'fixed-pitched :height 180)
     :custom
     (org-superstar-headline-bullets-list '("◉" "○" "●" "○" "●" "○" "●"))
     (org-superstar-special-todo-items t)
     (org-superstart-leading-bullet "")
   )
#+end_src

*  User Interface
** Application
*** Start-up
Disable start up screen and message
#+begin_src emacs-lisp
  ;;  Disable default start-up message
(setq inhibit-startup-message t) 

;; Disable default start-up scree
(setq inhibit-startup-screen t)
#+end_src
*** Menu Bar
Turn off menu bar because I can use more vertical space
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
#+END_SRC
*** Tool Bar
Turn off tool bar for more vertical space
#+begin_src emacs-lisp
  (tool-bar-mode -1)
#+end_src
*** Scroll Bar
Hide Scroll Bar because it's pointless, since my fingers are not leaving the keyboard
#+begin_src emacs-lisp
  (scroll-bar-mode -1)
#+end_src

*** Theme
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :config
    (setq doom-themes-enable-bold t
	  doom-themes-enable-italic t)
    (load-theme 'doom-oceanic-next t))
#+END_SRC

*** Icons
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons)
#+END_SRC

*** Modeline
Use Doom moodline here.
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
  :ensure t
  :init
  (doom-modeline-mode 1)
  :config
  (setq doom-modeline-height 32)
  (setq doom-modeline-bar-width 12)
  (setq doom-modeline-major-mode-icon t)
  (setq doom-modeline-major-mode-color-icon t)
  (setq doom-modeline-minor-modes nil)
  (setq doom-modeline-buffer-file-name-style 'relative-from-project)
  (setq doom-modeline-buffer-state-icon t)
  (setq doom-modeline-buffer-modification-icon t)
  (setq doom-modeline-icon (display-graphic-p))
  (setq doom-modeline-indent-info t)
  (setq doom-modeline-lsp t))
#+END_SRC

** Editor UI

*** Font

**** Scale
Set font scale for regular Linux and Mac.
#+begin_src emacs-lisp
  (defvar yhou-font-scale 100)

  ;; Macbook specific configuration: retina display makes everthing small
  (if (eq system-type 'darwin)
      (setq yhou-font-scale 140))

  (if (eq system-type 'gnu/linux)
      (setq yhou-font-scale 100))
#+end_src

**** Font Family
Use JetBrains's font since it is the best
#+begin_src bash
  sudo apt update && sudo apt upgrade -y
#+end_src

#+begin_src emacs-lisp
(set-face-attribute 'default nil :font "JetBrains Mono" :height yhou-font-scale)
(set-face-attribute 'fixed-pitch nil :font "JetBrains Mono" :height yhou-font-scale)
(set-face-attribute 'variable-pitch nil :font "Ubuntu" :weight 'medium :height yhou-font-scale)
#+end_src

*** Line Number
Make line number visible globally
#+begin_src emacs-lisp
  (global-display-line-numbers-mode t)
#+end_src

Highlight current line:
#+begin_src emacs-lisp
  (global-hl-line-mode t)
#+end_src

*** Spacing
Add space between editor and line numbers
#+begin_src emacs-lisp
  (set-fringe-mode 16)
#+end_src


* Navigation
Customization for navigating within Emacs.

** Ace Window - Jumping between windows
#+begin_src emacs-lisp
  (use-package ace-window)
#+end_src

** Search

*** Text Search
I use Ag for searching.
#+begin_src emacs-lisp
  (use-package ag
    :config
    (setq ag-highlight-search t))
#+end_src

*** Swiper
#+begin_src emacs-lisp
  (use-package swiper)
#+end_src

* Editing
** Completion (Ivy)
#+begin_src emacs-lisp
;; Provide additional documation when Ivy is triggered
(use-package counsel
  :diminish
  :ensure t
  :bind (("M-x" . counsel-M-x)
		 ("C-x b" . counsel-ibuffer)
		 ("C-x C-f" . counsel-find-file)))

  (use-package ivy
    :ensure t
    :config
      (ivy-mode 1) ;; ensure ivy always runs
  (setq ivy-use-virtual-buffers t)
  (setq ivy-height 20)
  (setq ivy-count-format "%d/%d ")
  :bind(("C-s" . swiper-isearch)))

  (use-package ivy-rich
    :ensure t
    :after ivy
    :init
    (ivy-rich-mode 1))
#+end_src

* Key Maps
Centralized place to manage all key bindings in Emacs.

** Custom Key Maps
#+begin_src emacs-lisp
    (define-prefix-command 'yhou-key-map)
  (global-set-key (kbd "C-c y") 'yhou-key-map)
#+end_src

** Global Keys
These key bindings should work regardless of the major mode in the current buffer.
#+begin_src emacs-lisp
  ;; Search project with Ag
  (define-key 'yhou-key-map (kbd "f") 'ag-project)
  ;; Reload buffer
  (define-key 'yhou-key-map (kbd "r") 'revert-buffer)
  ;; Jump Window
  (global-set-key (kbd "M-o") 'ace-window)
#+end_src

